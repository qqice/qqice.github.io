[{"content":"Yank-Note 特色功能使用说明 English | 中文\n[toc]{type: \u0026ldquo;ol\u0026rdquo;, level: [2]}\n应用数据 \u0026lt;home\u0026gt; 为当前操作系统的用户主目录，例如：\nWindows: C:\\Users\\\u0026lt;username\u0026gt; Linux: /home/\u0026lt;username\u0026gt; macOS: /Users/\u0026lt;username\u0026gt; 应用相关的数据目录存放在 \u0026lt;home\u0026gt;/yank-note 下面，点击托盘菜单“打开主目录”即可查看\n目录说明：\n配置文件 \u0026lt;home\u0026gt;/yank-note/config.json\n导出 docx 参考文档 \u0026lt;home\u0026gt;/yank-note/pandoc-reference.docx\n文档历史版本 \u0026lt;home\u0026gt;/yank-note/histories\n[!TIP] 如果您不小心丢失了您的文档数据，您可以到此文件夹尝试找回。\n[!CAUTION] 出于性能的考虑，超过 102400 个字符的文档将不会储存历史记录。因此请谨慎在文档中嵌入 Base64 图片。\n插件 \u0026lt;home\u0026gt;/yank-note/plugins\n主题 \u0026lt;home\u0026gt;/yank-note/themes\n扩展 \u0026lt;home\u0026gt;/yank-note/extensions\n其他用户数据 \u0026lt;home\u0026gt;/yank-note/data\nTOC 生成 需要生成目录的地方写入 [toc]{type: \u0026quot;ul\u0026quot;, level: [1,2,3]} 可以控制目录样式 ul 或 ol 和级别\n待办切换 在预览界面打勾试试\n2021-06-06 10:27 TEST1 2021-06-06 10:27 TEST2 2021-06-06 10:27 TEST3 加密文档 以 .c.md 结尾的文档视为加密文档，可以用来保存机密的信息。 加密和解密过程均在前端完成。 请务必保管好文档密码，密码一旦丢失就只能自己暴力破解了。 Markdown 增强 在编辑器中键入 / 可以获得提示\n高亮：==marked== 上标：29^th^ 下标：H~2~0 脚注：脚注1语法2 Emoji: :) :joy: 缩写： *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C. Github Alerts 此功能使用 markdown-it-github-alerts 实现，支持 Github 风格的警告提示。\n[!NOTE] 注意 突出强调用户在浏览时应该注意的信息。\n[!TIP] 提示 提供可选的信息以帮助用户更加成功。\n[!IMPORTANT] 重要 对于用户成功至关重要的关键信息。\n[!WARNING] 警告 由于潜在风险，需要立即引起用户的注意的关键内容。\n[!CAUTION] 小心 行动的负面潜在后果。\n元素属性书写 此功能使用 markdown-it-attributes 实现。\n红色文字，白色背景，居中和边框{.bgw .text-center .with-border style=\u0026ldquo;color:red\u0026rdquo;} 显示为块元素{.block} 转义语法{style=\u0026ldquo;color:red\u0026rdquo;} 一些内置样式类：\n类名 说明 avoid-page-break 打印/导出PDF时避免页面在此元素中断 new-page 打印/导出PDF时在此元素前分页 skip-print 打印/导出PDF时跳过此元素 skip-export 导出/复制HTML时跳过此元素 inline 当前元素显示为行内元素 block 当前元素显示为块元素 reduce-brightness 使用暗色主题时候降低此元素亮度 bgw 设置当前元素背景为白色 copy-inner-text 标记 “Ctrl/Cmd + 单击左键” 拷贝元素文字 wrap-code 应用于代码块，让其自动换行 text-left 当前元素文字左对齐 text-center 当前元素文字居中对齐 text-right 当前元素文字右对齐 with-border 给当前元素加上边框 图片增强 一个段落下如果只有一个图片元素，默认会渲染成块元素并居中。如果要强制显示为行内元素，可以在图片链接参数后面追加 .inline 如上图所示。 如果要给图片添加白色背景优化展示效果（针对某些透明图片）,可以在图片链接参数后面追加 .bgw 如： 可以使用markdown-it-imsize的方式来设置图片尺寸 例如这是一个宽度为 16px 的图片: ![](logo-small.png =16x) 思维导图 只需要在列表根节点加上 {.mindmap} 即可。\n中心节点{.mindmap} [1] 状态可见原则 [2] 环境贴切原则 [3] 用户可控原则 [4] 一致性原则 [5] 防错原则 [6] 易取原则 [7] 灵活高效原则 [8] 优美且简约原则 [9] 容错原则 [10] 人性化帮助原则 脑图使用 kityminder-core 实现。\nMermaid 图形 graph LR A[Hard] --\u003e|Text| B(Round) B --\u003e C{Decision} C --\u003e|One| D[Result 1] C --\u003e|Two| E[Result 2]\rsequenceDiagram Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!\rgantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d\rstateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*]\rpie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15\rjourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me\rPlantUML 图形 您可以在 设置 中配置使用本地端点或 PlantUML 在线端点来生成图形。\n[!IMPORTANT] 如果使用本地端点，则系统需要有 Java 环境，并安装有 Graphviz 如果提示 Cannot find Graphviz，请参考 Test your GraphViz installation\n示例如下\n@startuml a -\u0026gt; b @enduml\n表格增强 此功能使用 markdown-it-multimd-table 实现 支持在表格中使用多行文本和列表。支持表格说明渲染\n您可以双击/右键单元格快捷编辑单元格内容，相关快捷键：\nDBLClick: 编辑单元格 Escape: 退出编辑 Enter: 确认编辑并编辑下一行 Shift + Enter: 确认编辑并编辑上一行 Cmd/Ctrl + Shift + Enter: 确认编辑并插入下一行 Tab: 确认编辑并编辑下一列 Shift + Tab: 确认编辑并编辑上一列 First header Second header List: More \\ over | data \\ several | Test | Test [测试表格] First header Second header AAAAAAAAAAAA BBBBBBBBBBBBBB AAAAAAAAAAAA BBBBBBBBBBBBBB AAAAAAAAAAAA BBBBBBBBBBBBBB AAAAAAAAAAAA BBBBBBBBBBBBBB AAAAAAAAAAAA BBBBBBBBBBBBBB Test Test [小尺寸表格] {.small} h1 h2 h3 x1 x2 x3 {rowspan=2 style=\u0026ldquo;color:red\u0026rdquo;} x4 {colspan=2} [合并单元格] Katex 公式 此功能由 KaTeX 提供。\n$$ \\begin{array}{c} \\nabla \\times \\vec{\\mathbf{B}} -, \\frac1c, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} \u0026amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\nabla \\cdot \\vec{\\mathbf{E}} \u0026amp; = 4 \\pi \\rho \\ \\nabla \\times \\vec{\\mathbf{E}}, +, \\frac1c, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} \u0026amp; = \\vec{\\mathbf{0}} \\ \\nabla \\cdot \\vec{\\mathbf{B}} \u0026amp; = 0 \\end{array} $$\nequation description $\\nabla \\cdot \\vec{\\mathbf{B}} = 0$ divergence of $\\vec{\\mathbf{B}}$ is zero $\\nabla \\times \\vec{\\mathbf{E}}, +, \\frac1c, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} = \\vec{\\mathbf{0}}$ curl of $\\vec{\\mathbf{E}}$ is proportional to the rate of change of $\\vec{\\mathbf{B}}$ $\\nabla \\times \\vec{\\mathbf{B}} -, \\frac1c, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\nabla \\cdot \\vec{\\mathbf{E}} = 4 \\pi \\rho$ what? 运行代码 支持运行 JavaScript PHP nodejs Python bash bat 代码。 此功能执行外部命令实现，所以需要安装相应环境。\n代码块第一行需要包含以 --run-- 字符串，示例如下\n1 2 3 4 // --run-- await new Promise(r =\u0026gt; setTimeout(r, 500)) ctx.ui.useToast().show(\u0026#34;info\u0026#34;, \u0026#34;HELLOWORLD!\u0026#34;) console.log(\u0026#39;HELLOWORLD\u0026#39;) 1 2 // --run-- --output-html-- console.log(`output \u0026lt;i\u0026gt;HTML\u0026lt;/i\u0026gt;`) 1 2 // --run-- console.log(\u0026#39;HELLOWORLD\u0026#39;) 1 2 // --run-- echo \u0026#39;HELLOWORLD!\u0026#39;; 1 2 # --run-- print(\u0026#39;HELLOWORLD\u0026#39;) 1 2 # --run-- date 1 2 REM --run-- @echo HELLOWORLD 1 2 3 4 5 6 7 8 // --run-- gcc $tmpFile.c -o $tmpFile.out \u0026amp;\u0026amp; $tmpFile.out #include \u0026lt;stdio.h\u0026gt; int main () { printf(\u0026#34;Hello, World!\u0026#34;); return 0; } 1 2 3 4 5 6 7 // --run-- java $tmpFile.java class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } 集成终端 使用 Alt/Option + T 或者点击状态栏 切换终端 菜单唤起集成终端 支持在编辑器中选中一段代码后按下 Shift + Alt/Option + R 直接在终端中运行命令。免去复制粘贴。 切换内置终端工作目录到当前目录 右键目录 小工具 支持在文档中嵌入 HTML 小工具。 HTML 代码块第一行需要包含以 --applet-- 字符串，其余字符串作为小工具标题，示例如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!-- --applet-- Hash --\u0026gt; \u0026lt;script\u0026gt; function run (type) { const input = document.getElementById(\u0026#39;input\u0026#39;) const output = document.getElementById(\u0026#39;output\u0026#39;) output.value = \u0026#39;\u0026#39; switch (type) { case \u0026#39;md5\u0026#39;: output.value = ctx.lib.cryptojs.MD5(input.value).toString().toLowerCase() break case \u0026#39;sha1\u0026#39;: output.value = ctx.lib.cryptojs.SHA1(input.value).toString().toLowerCase() break case \u0026#39;sha256\u0026#39;: output.value = ctx.lib.cryptojs.SHA256(input.value).toString().toLowerCase() break } output.focus() output.select() } \u0026lt;/script\u0026gt; \u0026lt;div\u0026gt; 输入 \u0026lt;textarea id=\u0026#34;input\u0026#34; style=\u0026#34;display: block; width: 100%\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button onclick=\u0026#34;run(\u0026#39;md5\u0026#39;)\u0026#34;\u0026gt;MD5\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;run(\u0026#39;sha1\u0026#39;)\u0026#34;\u0026gt;SHA1\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;run(\u0026#39;sha256\u0026#39;)\u0026#34;\u0026gt;SHA256\u0026lt;/button\u0026gt; \u0026lt;textarea id=\u0026#34;output\u0026#34; style=\u0026#34;display: block; width: 100%\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button onclick=\u0026#34;document.getElementById(\u0026#39;input\u0026#39;).value = \u0026#39;\u0026#39;; document.getElementById(\u0026#39;output\u0026#39;).value = \u0026#39;\u0026#39;\u0026#34;\u0026gt;清空\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;var x = document.getElementById(\u0026#39;output\u0026#39;); x.value = x.value.toUpperCase()\u0026#34;\u0026gt;结果大写\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; 如果没有标题，将没有外部边框装饰\n1 2 \u0026lt;!-- --applet-- --\u0026gt; \u0026lt;button onclick=\u0026#34;ctx.ui.useToast().show(`info`, `HELLOWORLD!`)\u0026#34;\u0026gt;HELLO\u0026lt;/button\u0026gt; ECharts 图形 Js 代码块第一行包含以 --echarts-- 字符串会被解析成 ECharts 图形，示例如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // --echarts-- const option = { // backgroundColor: \u0026#39;#2c343c\u0026#39;, title: { text: \u0026#39;Customized Pie\u0026#39;, left: \u0026#39;center\u0026#39;, top: 20, textStyle: { color: \u0026#39;#888\u0026#39; } }, tooltip : { trigger: \u0026#39;item\u0026#39;, formatter: \u0026#34;{a} \u0026lt;br/\u0026gt;{b} : {c} ({d}%)\u0026#34; }, visualMap: { show: false, min: 80, max: 600, inRange: { colorLightness: [0, 1] } }, series : [ { name:\u0026#39;访问来源\u0026#39;, type:\u0026#39;pie\u0026#39;, radius : \u0026#39;55%\u0026#39;, center: [\u0026#39;50%\u0026#39;, \u0026#39;50%\u0026#39;], data:[ {value:335, name:\u0026#39;直接访问\u0026#39;}, {value:310, name:\u0026#39;邮件营销\u0026#39;}, {value:274, name:\u0026#39;联盟广告\u0026#39;}, {value:235, name:\u0026#39;视频广告\u0026#39;}, {value:400, name:\u0026#39;搜索引擎\u0026#39;} ].sort(function (a, b) { return a.value - b.value; }), roseType: \u0026#39;radius\u0026#39;, label: { normal: { textStyle: { color: \u0026#39;#888\u0026#39; } } }, labelLine: { normal: { lineStyle: { color: \u0026#39;#888\u0026#39; }, smooth: 0.2, length: 10, length2: 20 } }, itemStyle: { normal: { color: \u0026#39;#c23531\u0026#39;, shadowBlur: 200, shadowColor: \u0026#39;rgba(0, 0, 0, 0.5)\u0026#39; } }, animationType: \u0026#39;scale\u0026#39;, animationEasing: \u0026#39;elasticOut\u0026#39;, animationDelay: function (idx) { return Math.random() * 200; } } ] } chart.setOption(option, true) Draw.io 图形 链接属性 link-type 值需要是 drawio 字符串。使用链接的形式也不会影响其他 Markdown 解析器解析。\ndrawio{link-type=\u0026ldquo;drawio\u0026rdquo;}\nLuckysheet 表格 链接属性 link-type 值需要是 luckysheet 字符串。使用链接的形式也不会影响其他 Markdown 解析器解析。\n[!WARNING] 现阶段 Luckysheet Bug 较多，使用需谨慎。\nluckysheet{link-type=\u0026ldquo;luckysheet\u0026rdquo;}\n容器块 支持类似 VuePress 容器块 功能，使用 markdown-it-container 实现\n使用\n1 2 3 ::: \u0026lt;type\u0026gt; [title] [content] ::: type 是必需的， title 和 content 是可选的。\n支持的 type 有：tip, warning, danger, details, group, group-item, row, col, section, div\n示例\n::: tip 这是一个提示 :::\n::: warning 这是一个警告 :::\n::: danger 这是一个危险警告 :::\n::: danger STOP 危险区域，禁止通行 :::\n::: details 这是一个 details 标签 :::\n::: details 点击展开更多 这是一个 details 标签 :::\n:::: group 这是标签组 ::: group-item Tab 1 test 1 :::\n::: group-item *Tab 2 test 2 标题前带 * 表示默认激活此选项卡 :::\n::: group-item Tab 3 test 3 ::: ::::\n::::: row 分列示例 :::: col TODO ::: warning Item 1 ::: ::: warning Item 2 ::: ::: warning Item 3 ::: :::: :::: col DONE ::: tip Item 4 ::: ::: tip Item 5 ::: :::: :::::\n:::: row ::: col Column 1 test 1 ::: ::: col Column 2 test 2 ::: ::: col Column 3 test 3 ::: ::::\nAI Copilot 人工智能写作助手 Yank Note 接入了 OpenAI、Google AI 等人工智能平台，可以使用人工智能进行智能补全、文本重写等功能\n[!NOTE] 相关 API token 需要你自行获取。且需要 安装并启用 AI Copilot 扩展\nFront Matter 页面支持类似 Jekyll Front Matter 配置信息\n内置变量\n变量名 类型 描述 headingNumber boolean 是否开启页面标题序号编号 wrapCode boolean 是否开启代码换行 enableMacro boolean 是否开启宏替换 define Record\u0026lt;string, string\u0026gt; 宏定义，定义文本替换 defaultPreviewer string 文档默认的预览器，某些扩展可能提供特殊的预览界面。如 Reveal.js 扩展 mdOptions Record\u0026lt;string, boolean\u0026gt; Markdown-it 解析参数 mdOptions.html boolean 开启 HTML 解析 mdOptions.breaks boolean 转换 \\n 成 \u0026lt;br\u0026gt; mdOptions.linkify boolean 自动转换链接 mdOptions.typographer boolean 开启语言替换和引号美化 katex Record\u0026lt;string, any\u0026gt; Katex 配置 宏替换 [!NOTE] 此功能 高级版可用\nYank Note 允许你在页面中嵌入宏，用以动态地替换文档。\n[!IMPORTANT] 使用前需要先在 Front Matter 开启宏替换，定义 enableMacro: true。\n[!WARNING] 使用宏替换可能会导致源码和预览行号对应不准确，Yank Note 已经尽可能处理，但某些情况可能仍然会出现同步滚动异常。\n文本替换 Front Matter 中的 define 字段可以定义一些文本替换映射。支持在另一个文件定义，支持宏表达式。具体可参考本文件顶部 Front Matter 部分。\n[!TIP] 你还可以在设置中配置 全局宏替换 ，这样所有文档都可以使用。不过，你仍然需要在 Front Matter 中定义 enableMacro: true。\n应用名: \u0026ndash;APP_NAME\u0026ndash; 应用版本: \u0026ndash;APP_VERSION\u0026ndash; 另一个文件的定义: \u0026ndash;TEST_DEFINE\u0026ndash; 宏表达式 语法：\n1 [= \u0026lt;expression\u0026gt; =] 其中 expression 是需要执行的 js 表达式，支持 await/Promise 异步表达式。\n如果表达式中需要包含 [= 或 =] 请输入 [\\= 或 =\\] 转义替换\n一些示例 是否开启页面标题序号编号: [= headingNumber =] 使用变量: [= customVar =] 定义变量: [= $export(\u0026rsquo;testVar\u0026rsquo;, \u0026lsquo;Test\u0026rsquo;) =][= testVar =] 定义函数: [= $export(\u0026lsquo;format\u0026rsquo;, (a, b) =\u0026gt; ${a}, ${b}!) =][= format(\u0026lsquo;HELLO\u0026rsquo;, \u0026lsquo;WORLD\u0026rsquo;) =] 进一步处理: XXXXXXXXXXXXXX [= $afterMacro(src =\u0026gt; src.replace(/X{4,}/g, \u0026lsquo;YYYYY\u0026rsquo;)) =] 应用版本：[= $ctx.version =] 当前文档名: [= $doc.basename =] 当前时间: [= $ctx.lib.dayjs().format(\u0026lsquo;YYYY-MM-DD HH:mm\u0026rsquo;) =] 计数器: [= $seq图- =] | [= $seq图- =] | [= $seq图- =] | [= $seq表- =] | [= $seq表- =] 限定符转义: [= \u0026lsquo;[= =]\u0026rsquo; =] 四则运算: [= (1 + 2) / 2 =] 引用文件（支持最多嵌套 3 层，可使用目标文档中定义的 Front Matter 变量) [= $include(\u0026rsquo;./_FRAGMENT.md\u0026rsquo;, true) =]\n被引用文档中定义的变量：[= customVarFromOtherDoc =] 你的 IP 地址：[= fetch(\u0026lsquo;https://ifconfig.me/ip\u0026rsquo;).then(r =\u0026gt; r.text()) =] 天气预报 1 [= await ctx.utils.sleep(1000), fetch(\u0026#39;https://wttr.in?0AT\u0026#39;).then(r =\u0026gt; r.text()) =] 九九乘法表 [= (function nine (num) { let res = \u0026rsquo;\u0026rsquo; for (let i = 1; i \u0026lt;= num; i++) { let str = \u0026lsquo;\u0026rsquo;; for (let k = 1; k \u0026lt;= num; k++) { if (i \u0026gt;= k) { str += k + \u0026lsquo;x\u0026rsquo; + i + \u0026lsquo;=\u0026rsquo; + i*k + \u0026rsquo; \u0026lsquo;; } } res = res + str + \u0026lsquo;\\n\u0026rsquo; } return res })(9) =] 可用变量 宏表达式可以使用在 Front Matter 定义的变量，也可以使用下面的内置变量\n变量名 类型 描述 $ctx object 编辑器 ctx，可参考插件开发指南 和Api 文档 $include (path: string, trim = false) =\u0026gt; Result 引入其他文档片段方法 $export (key: string, val: any) =\u0026gt; Result 定义一个本文档可以使用的变量 $noop () =\u0026gt; Result 无操作函数，可用于文本占位使用 $afterMacro (fn: (src: string) =\u0026gt; string) =\u0026gt; Result 定义一个宏替换后的回调函数，可用于对替换后的文本进行进一步处理。 $seq (label: string) =\u0026gt; Result 文档内部计数器 $doc object 当前文档信息 $doc.basename string 当前文档文件名（无后缀） $doc.name string 当前文档文件名 $doc.path string 当前文档路径 $doc.repo string 当前文档仓库 $doc.content string 当前文档内容 $doc.status 'loaded', 'save-failed', 'saved' 当前文档状态 命令行参数 在向别人交接文档的时候，可以使用脚本，自定义命令行参数启动程序，方便对方查看文档。\n名称 作用 默认值 说明 示例 \u0026ndash;port 服务器监听端口 3044 端口 \u0026ndash;port=8080 \u0026ndash;disable-tray 禁用常驻托盘 false true/false \u0026ndash;disable-tray \u0026ndash;readonly 编辑器只读 false true/false \u0026ndash;readonly \u0026ndash;show-status-bar 显示状态栏 true true/false \u0026ndash;show-status-bar=false \u0026ndash;data-dir 数据目录 无 目录路径字符串 \u0026ndash;data-dir=\u0026rsquo;./.data\u0026rsquo; \u0026ndash;init-repo 初始仓库名 无 字符串 \u0026ndash;init-repo=\u0026lsquo;test\u0026rsquo; \u0026ndash;init-file 加载文件路径 无 文件路径，相对于仓库路径 \u0026ndash;init-file=\u0026rsquo;/1.md\u0026rsquo; 自定义样式 右键点击托盘图标，点击“打开主目录”，进入 \u0026lt;主目录\u0026gt;/themes 目录。 复制 github.css 为一个新 CSS 文件，修改 CSS 内容 打开设置 =\u0026gt; 外观 =\u0026gt; 自定义 CSS 切换 CSS 配置 插件开发 请参考插件开发指南\n这是一个脚注\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n这也是一个脚注\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-05-20T12:17:03+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240216170449.png","permalink":"https://Multipleriver.github.io/p/%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/","title":"测试页面"}]